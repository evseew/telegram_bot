import os
import openai
import logging
import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY or not ASSISTANT_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –•—Ä–∞–Ω–µ–Ω–∏–µ `thread_id` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞)
user_threads = {}

async def get_or_create_thread(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π thread_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id in user_threads:
        return user_threads[user_id]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ë–ï–ó project_id
    thread = openai.beta.threads.create()
    thread_id = thread.id  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ä–∞–Ω–µ–µ –±—ã–ª–æ thread["id"])

    user_threads[user_id] = thread_id
    return thread_id

async def chat_with_assistant(user_id, user_message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    thread_id = await get_or_create_thread(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫
    openai.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_message
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    run = openai.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID
    )

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    while True:
        run_status = openai.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        )
        if run_status.status in ["completed", "failed"]:  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ä–∞–Ω–µ–µ –±—ã–ª–æ ["completed", "failed"])
            break

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    messages = openai.beta.threads.messages.list(thread_id=thread_id)

    if messages and len(messages.data) > 0:  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        return messages.data[0].content[0].text.value  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

    return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

@router.message(Command("start"))
async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, EdHacks. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ç–µ–∫—Å—Ç.–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!")

@router.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user_input = message.text

    response = await chat_with_assistant(user_id, user_input)
    await message.reply(response)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (aiogram 3.x)"""
    dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º router
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è aiogram 3.x